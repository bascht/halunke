#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'


require "halunke/lexer"
require "halunke/nodes"

module Halunke
  class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 44)

def parse(code)
  @tokens = Lexer.new.tokenize(code)
  do_parse
end

def next_token
  @tokens.shift
end
...end grammar.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     7,     8,     9,     6,    11,     5,    15,    10,     7,     8,
     9,     6,    16,     5,    18,    10,     7,     8,     9,     6,
   nil,     5,   nil,    10,     7,     8,     9,     6,   nil,     5,
   nil,    10,     7,     8,     9,     6,   nil,     5,   nil,    10 ]

racc_action_check = [
     0,     0,     0,     0,     1,     0,    11,     0,     3,     3,
     3,     3,    13,     3,    17,     3,     5,     5,     5,     5,
   nil,     5,   nil,     5,     6,     6,     6,     6,   nil,     6,
   nil,     6,    14,    14,    14,    14,   nil,    14,   nil,    14 ]

racc_action_pointer = [
    -2,     4,   nil,     6,   nil,    14,    22,   nil,   nil,   nil,
   nil,     6,   nil,     4,    30,   nil,   nil,     8,   nil ]

racc_action_default = [
    -2,   -11,    -1,    -2,    -4,    -2,   -11,    -7,    -8,    -9,
   -10,   -11,    -3,   -11,    -2,    19,    -5,   -11,    -6 ]

racc_goto_table = [
     2,     1,    14,    12,   nil,    13,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    17 ]

racc_goto_check = [
     2,     1,     3,     2,   nil,     2,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     2 ]

racc_goto_pointer = [
   nil,     1,     0,    -4,   nil ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 11, :_reduce_1,
  0, 12, :_reduce_2,
  2, 12, :_reduce_3,
  1, 13, :_reduce_none,
  3, 13, :_reduce_5,
  4, 13, :_reduce_6,
  1, 14, :_reduce_7,
  1, 14, :_reduce_8,
  1, 14, :_reduce_9,
  1, 14, :_reduce_10 ]

racc_reduce_n = 11

racc_shift_n = 19

racc_token_table = {
  false => 0,
  :error => 1,
  :NUMBER => 2,
  :STRING => 3,
  :BAREWORD => 4,
  :OPEN_PAREN => 5,
  :CLOSE_PAREN => 6,
  :OPEN_CURLY => 7,
  :CLOSE_CURLY => 8,
  :OPERATOR => 9 }

racc_nt_base = 10

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "NUMBER",
  "STRING",
  "BAREWORD",
  "OPEN_PAREN",
  "CLOSE_PAREN",
  "OPEN_CURLY",
  "CLOSE_CURLY",
  "OPERATOR",
  "$start",
  "Program",
  "Expressions",
  "Expression",
  "Literal" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 13)
  def _reduce_1(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 17)
  def _reduce_2(val, _values, result)
     result = Nodes.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 18)
  def _reduce_3(val, _values, result)
     result = Nodes.new([val[0]]).concat(val[1]) 
    result
  end
.,.,

# reduce 4 omitted

module_eval(<<'.,.,', 'grammar.y', 23)
  def _reduce_5(val, _values, result)
     result = Halunke::FunctionNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 24)
  def _reduce_6(val, _values, result)
     result = Halunke::MessageSendNode.new(val[1], MessageNode.new(val[2].nodes)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 28)
  def _reduce_7(val, _values, result)
     result = NumberNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 29)
  def _reduce_8(val, _values, result)
     result = StringNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 31)
  def _reduce_9(val, _values, result)
     result = BarewordNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 32)
  def _reduce_10(val, _values, result)
     result = BarewordNode.new(val[0]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Halunke
